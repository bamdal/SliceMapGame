//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/OptionInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @OptionInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @OptionInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""OptionInputActions"",
    ""maps"": [
        {
            ""name"": ""Option"",
            ""id"": ""8bf0fbf1-31dc-48be-8205-e496adc93559"",
            ""actions"": [
                {
                    ""name"": ""ESC"",
                    ""type"": ""Button"",
                    ""id"": ""13006f84-bae8-4787-bfbb-6fef3179dec3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""689e7412-76da-433f-937a-11510f017b4d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""ESC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KM"",
            ""bindingGroup"": ""KM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Option
        m_Option = asset.FindActionMap("Option", throwIfNotFound: true);
        m_Option_ESC = m_Option.FindAction("ESC", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Option
    private readonly InputActionMap m_Option;
    private List<IOptionActions> m_OptionActionsCallbackInterfaces = new List<IOptionActions>();
    private readonly InputAction m_Option_ESC;
    public struct OptionActions
    {
        private @OptionInputActions m_Wrapper;
        public OptionActions(@OptionInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ESC => m_Wrapper.m_Option_ESC;
        public InputActionMap Get() { return m_Wrapper.m_Option; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OptionActions set) { return set.Get(); }
        public void AddCallbacks(IOptionActions instance)
        {
            if (instance == null || m_Wrapper.m_OptionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OptionActionsCallbackInterfaces.Add(instance);
            @ESC.started += instance.OnESC;
            @ESC.performed += instance.OnESC;
            @ESC.canceled += instance.OnESC;
        }

        private void UnregisterCallbacks(IOptionActions instance)
        {
            @ESC.started -= instance.OnESC;
            @ESC.performed -= instance.OnESC;
            @ESC.canceled -= instance.OnESC;
        }

        public void RemoveCallbacks(IOptionActions instance)
        {
            if (m_Wrapper.m_OptionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOptionActions instance)
        {
            foreach (var item in m_Wrapper.m_OptionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OptionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OptionActions @Option => new OptionActions(this);
    private int m_KMSchemeIndex = -1;
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("KM");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    public interface IOptionActions
    {
        void OnESC(InputAction.CallbackContext context);
    }
}
